// Prisma schema

// Define a generator for the Prisma client
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

// Define the data source for MongoDB
datasource mongo {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Define the enums for roles, delivery types, and payment types
enum Role {
  SUPERADMIN
  ADMIN
  MODERATOR
}

enum DeliveryType {
  STORE_PICKUP
  YANGON
  OTHERS
}

enum PaymentType {
  CASH_ON_DELIVERY
  BANK_TRANSFER
}

// Define the Admin model
model Admin {
  id       ObjectId  @id
  username String
  email    String    @unique
  password String
  role     Role      @default(ADMIN)
  active   Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

// Define the Category model
model Category {
  id              ObjectId  @id
  name            String    @unique
  description     String?
  thumbnailImage  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  products        Product[]
}

// Define the Product model
model Product {
  id               ObjectId  @id
  name             String
  price            Float
  discountPercent Int?      @default(0)
  description      String
  detail           String?
  category         Category? @relation(fields: [categoryId], references: [id])
  categoryId       ObjectId?
  image1           String?
  image2           String?
  stock            Int?      @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  product          OrderDetail[]
  tags             Tag[]
}

// Define the Tag model
model Tag {
  id      ObjectId  @id
  name    String
  products Product[]
}

// Define the Customer model
model Customer {
  id                ObjectId  @id
  fullname          String
  email             String    @unique
  password          String
  shippingAddress   String
  phone             String?
  orders            Order[]
  resetPwdToken     String?   @unique
  resetPwdExpire    Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
}

// Define the Order model
model Order {
  orderNumber       Int       @id @unique
  customer          Customer? @relation(fields: [customerId], references: [id])
  customerId        ObjectId?
  shippingAddress   String
  township          String?
  city              String?
  state             String?
  zipCode           String?
  orderDate         DateTime  @default(now())
  paymentType       PaymentType @default(CASH_ON_DELIVERY)
  deliveryType      DeliveryType @default(STORE_PICKUP)
  totalPrice        Float
  deliveryDate      DateTime?
  orders            OrderDetail[]
}

// Define the OrderDetail model
model OrderDetail {
  order       Order   @relation(fields: [orderNumber], references: [orderNumber])
  orderNumber Int
  product     Product @relation(fields: [productId], references: [id])
  productId   ObjectId
  quantity    Int     @default(1)

  @@id([orderNumber, productId])
}
